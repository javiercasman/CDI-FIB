{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOuJ57fHNdq8wdre7LiTCi0"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":4,"metadata":{"id":"e4aKkSCQ9B9b","executionInfo":{"status":"ok","timestamp":1684168581320,"user_tz":-120,"elapsed":571,"user":{"displayName":"Javier Castaño Mansilla","userId":"00132219958342687384"}}},"outputs":[],"source":["from math import floor\n","def arithmetic_decode(code,k,src,l): #supongo q tambien tendré q hacer lo de blocksize\n","    block_size = len(src[0][0])\n","    suma = 0\n","    src2 = []\n","    for i in range(len(src)):\n","        suma += src[i][1]\n","    for i in range(len(src)):\n","        src2.append((src[i][0],src[i][1]/suma))\n","    alpha = '0' * k\n","    beta = '1' * k\n","    gamma = code[:k]\n","    usados = k\n","    x = ''\n","    cumulative_probs = [0]\n","    aux = 0.0\n","    for i in range(len(src2)):\n","        aux += src2[i][1]\n","        cumulative_probs.append(aux)\n","    while len(x) != l:\n","        delta = int(beta,2) - int(alpha,2) + 1\n","        subintervals = []\n","        for j in range(1, len(cumulative_probs)):\n","            aux = (int(alpha,2) + int(floor(delta * cumulative_probs[j-1])),\n","                   int(alpha,2) + int(floor(delta * cumulative_probs[j]) - 1))\n","            subintervals.append(aux)\n","        for ind, subint in enumerate(subintervals):\n","            if subint[0] <= int(gamma,2) <= subint[1]:\n","                x += src2[ind][0]\n","                alpha = bin(subint[0])[2:].zfill(k)\n","                beta = bin(subint[1])[2:].zfill(k)\n","        if len(x) == l:\n","            break\n","        while alpha[0] == beta[0]:\n","            alpha = alpha[1:] + '0'\n","            beta = beta[1:] + '1'\n","            if usados == len(code):\n","                gamma = gamma[1:] + '0'\n","            else:\n","                gamma = gamma[1:] + code[usados]\n","                usados += 1\n","        while alpha[:2] == '01' and beta[:2] == '10':\n","            alpha = alpha[0] + alpha[2:] + '0'\n","            beta = beta[0] + beta[2:] + '1'\n","            if usados == len(code):\n","                gamma = gamma[0] + gamma[2:] + '0'\n","            else:\n","                gamma = gamma[0] + gamma[2:] + code[usados]\n","                usados += 1\n","    return x\n","\n","def source_fromtext(txt):\n","    x = []\n","    for l in set(txt):\n","        n = txt.count(l)\n","        x.append((l,n))\n","    x.sort(key=lambda x: x[0])\n","    return x"]},{"cell_type":"code","source":["class Node:\n","    def __init__(self, weight, sym, left=None, right=None):\n","        self.weight = weight\n","        self.sym = sym\n","        self.left = left\n","        self.right = right\n","        self.code = \"\"#0 o 1, depende de la dirección\n","\n","def huffman_code(txt):\n","    total = 0\n","    src = source_fromtext(txt)\n","    for _, w in src:\n","        total += w#lo quito?\n","    src.sort(key=lambda x: x[1])\n","    #no se como hacer lo de los nodos la vd q coñazo, ademas hay q hacer un insert con selection PQ EL BISECT NO VA\n","    huff_tree = []\n","    for a, w in src:\n","      node = Node(w, a)\n","      huff_tree.append(node)\n","    while len(huff_tree) > 1:\n","      node1 = huff_tree[0]; node2 = huff_tree[1]\n","      huff_tree.remove(node1); huff_tree.remove(node2)\n","      weight = node1.weight + node2.weight\n","      sym = node1.sym + node2.sym\n","      left = node1\n","      right = node2\n","      node1.code = \"0\"\n","      node2.code = \"1\"\n","      node = Node(weight, sym, left, right)\n","      index = len(huff_tree)\n","      for i in range(0, len(huff_tree)):\n","          if huff_tree[i].weight >= weight:\n","              index = i\n","              break\n","      huff_tree.insert(index, node)\n","    huff_dict = calculate_codes(huff_tree[0])\n","    huff_code = [(k, v) for k, v in huff_dict.items()]#hay q pasarlo a lista para el output\n","    huff_code.sort(key=lambda x:x[0])#NECESARIO esto, para ordenarlo PRIMERO alfabéticamente...\n","    huff_code.sort(key=lambda x:len(x[1]))#... y luego para ordenarlos segun longitud respetando el orden alfabético\n","    #falta canonizar\n","    huff_lens = [len(x[1]) for x in huff_code] #longitudes de cada letra codificada en huffman\n","    huff_canon = canonize(huff_lens)\n","    letters = [x[0] for x in huff_code]\n","    huffman = list(zip(letters,huff_canon))\n","    huffman.sort(key = lambda x:x[0])\n","\n","    return huffman\n","\n","def canonize(lens):\n","  first = \"\"\n","  for i in range(0,lens[0]):\n","    first += \"0\"\n","  canonized = []\n","  canonized.append(first)\n","  last_len = lens[0]\n","  last_code = first\n","  del lens[0]\n","  for x in lens:\n","    code = increment_alf(last_code)\n","    n_appends = x-last_len\n","    for i in range(0,n_appends):\n","      code += \"0\"\n","    last_code = code\n","    last_len = x\n","    canonized.append(code)\n","  return canonized\n","\n","def increment_alf(codeword,alf = [\"0\",\"1\"]):#para sumar en binario\n","#     if codeword == None: esto nunca deberia suceder, hay un error\n","#         codeword = \"\" #es q si no se bugea lol\n","    carry = False\n","    s = list(codeword)\n","    i = len(codeword)-1\n","    if s[i] != alf[-1]:\n","        index_in_alf = alf.index(s[i])\n","        s[i] = alf[index_in_alf+1]\n","    else:\n","        s[i] = alf[0]\n","        carry = True\n","    \n","    if carry:\n","        while True:\n","            i -= 1\n","            #if i < 0: #esto es necesario? no sabria decirte\n","                #raise ValueError(\"ERROR: no existeix cap codi amb aquesta propietat\")\n","            if s[i] != alf[-1]:\n","                index_in_alf = alf.index(s[i])\n","                s[i] = alf[index_in_alf+1]\n","                break\n","            else:\n","                s[i] = alf[0]\n","    codeword = \"\".join(s) #convertimos la lista en string\n","    return codeword #GILIPOLLAS\n","\n","def calculate_codes(node, value = \"\"):#en vd creo q esto es INUTIL de cojones pq solo necesito las longitudes de cada letra y no el codigo entero, pero bueno, al menos lo tengo hecho por si aca\n","  codes = {}\n","  newValue = value + str(node.code)\n","  if(node.left): calculate_codes(node.left, newValue)\n","  if(node.right): calculate_codes(node.right, newValue)\n","  if(not node.left and not node.right): codes[node.sym] = newValue\n","  return codes\n","\n","def decode(txtb,corr):\n","#     txt = txtb.split() vale no está separado, mira pregunta 6\n","#     decoded = []\n","#     for c in txt:\n","#         for x in corr:\n","#             if c in x[1]:\n","#                 decoded.append(x[0])\n","#     txta = \" \".join(decoded)\n","#     return txta\n","    i = 0\n","    txta = \"\"\n","    chain = \"\"\n","    while i < len(txtb):\n","        chain += txtb[i]\n","        for p in corr:\n","            if chain == p[1]:\n","                txta += p[0]\n","                chain = \"\"\n","                break\n","        i += 1\n","    return txta"],"metadata":{"id":"5USSJgd6-M83","executionInfo":{"status":"ok","timestamp":1684164015445,"user_tz":-120,"elapsed":7,"user":{"displayName":"Javier Castaño Mansilla","userId":"00132219958342687384"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["def decode_LZ77(tok):\n","    txt = ''\n","    for offset, length, char in tok:\n","        if offset == 1 and length == 0:\n","            txt += char\n","        else:\n","            for i in range(length):\n","                txt += txt[-offset]\n","            txt += char\n","    return txt\n","\n","def decode_LZSS(tok):\n","    txt = ''\n","    for token in tok:\n","        if type(token) != tuple:\n","            txt += token\n","        else:\n","            for i in range(token[1]):\n","                txt += txt[-token[0]]\n","    return txt\n","\n","def decode_LZ78(tok):\n","    txt = ''\n","    dictionary = ['']\n","    for token in tok:\n","        txt += dictionary[token[0]] + token[1]\n","        dictionary.append(dictionary[token[0]] + token[1])\n","    return txt\n","\n","def decode_LZW(tok,alp):\n","  dictionary = alp\n","  txt = \"\"\n","  last_sym = \"\"\n","  sym = \"\"\n","  first = True\n","  for ind in tok:\n","    sym = dictionary[ind]\n","    if(not first):\n","      dictionary[-1] += sym[0]\n","      if ind == len(dictionary) - 1:\n","        sym = dictionary[ind]#da igual poner ind q -1\n","    else:\n","      first = False\n","    txt += sym\n","    dictionary.append(sym)\n","  return txt\n","\n","from operator import itemgetter\n","def decode_burrows_wheeler(cod,i):\n","    n = len(cod)\n","    X = sorted([(j, x) for j, x in enumerate(cod)], key=itemgetter(1))\n","\n","    T = [None for j in range(n)]\n","    for j, y in enumerate(X):\n","        k, _ = y\n","        T[k] = j\n","\n","    Tx = [i]\n","    for j in range(1, n):\n","        Tx.append(T[Tx[j-1]])\n","\n","    S = [cod[j] for j in Tx]\n","    S.reverse()\n","    return ''.join(S)\n","\n","def decode_move_to_front(cod,alf):\n","  txt = \"\"\n","  for i in cod:\n","    c = alf[i]\n","    txt += c\n","    alf.insert(0,alf.pop(i))\n","  return txt"],"metadata":{"id":"YGJ1Wwbi-cg9","executionInfo":{"status":"ok","timestamp":1684169742718,"user_tz":-120,"elapsed":238,"user":{"displayName":"Javier Castaño Mansilla","userId":"00132219958342687384"}}},"execution_count":5,"outputs":[]}]}